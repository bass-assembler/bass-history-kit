Searching for: bass_v
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=0.html(83): <div class="postbody">I'll use this thread for WIPs prior to v15's release.<br><br>Here's the latest WIP, v14r05: (source code only, sorry)<br><br><!-- m --><a class="postlink" href="http://files.byuu.org/temp/bass_v14r05.tar.xz">http://files.byuu.org/temp/bass_v14r05.tar.xz</a><!-- m --><br><br>Lots of changes to the underlying nall library since v14. If anyone has lots of source code written in bass v14, could you please try assembling a binary with both v14 and v14r05, and diff the outputs to make sure it's generating identical files?<br><br>I still don't have a lot of bass source code written myself, so regression testing's somewhat difficult for me.<br><br>Also, I may rename the next release to v015 instead of just v15. I don't expect to ever make it to v100, but you never know.<br><br><hr><br><br>Windows compilation fixes: (sorry for the added hassle)<br><br>nall/directory.hpp:104:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; string_vector list;</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br>nall/windows/registry.hpp:83:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; string_vector part = name.split(&quot;/&quot;), result;</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div></div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=10.html(221): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r06.tar.xz">https://files.byuu.org/temp/bass_v14r06.tar.xz</a><!-- m --><br><br>Changelog:<br>* <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">scope {</pre> removed -- didn't appear to serve any purpose<br>* <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">scope name {</pre> is now <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">namespace name {</pre><br>* <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">scope name: {</pre> is now <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">function name {</pre><br>* fixed <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">global</pre> prefix ... it wasn't working at all before<br>* arch snes.cpu: added tcs/tsc variants for tas/tsa<br>* macros are now always scoped no matter what<br><br>The thing with macros and scoping is ... they create their own stack frames for variables and such. Once the macro execution concludes, the frames are destroyed. Even if that weren't the case, macros support arity overriding, so you can have <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">test&#40;&#41;</pre> and <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">test&#40;arg1, arg2&#41;</pre> and internally they become <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">test:0</pre> and <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">test:2</pre>. If you want a macro to create a variable outside of its execution stack frame, then you'll want to prefix the variable with <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">global</pre> to do that.<br><br>I updated the documentation with this WIP as well to reflect the changes.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=30.html(257): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r07.tar.xz">https://files.byuu.org/temp/bass_v14r07.tar.xz</a><!-- m --><br><br>I added SNES CPU &quot;branch #immediate&quot; instructions for qwertymodo, eg <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">bra #$03</pre>.<br><br>I added a new alternative macro, named inline. Simply replace the word macro with inline, and you get a macro that has no stack frame and is unscoped. Note that this is not the same as v14r05's unscoped macros. This time, the stack frame doesn't store variables inside of it ... they go into the existing stack frame you're currently in. Note that this may not be either the global scope nor global stack frame. inline is meant to represent a concept as if the code actually appeared right where you included it, whereas macro is meant to indicate a functional style programming that avoids polluting the current stack frame and can be used for recursive invocations.<br><br>push and pull were renamed enqueue and dequeue, so as to avoid conflicting with various ISAs that use push and/or pull as mnemonics.<br><br>putchar was renamed to print_char, and because it's so annoying to create using said function, I also added print_hex. I also fixed a bug where putchar before was not writing to the correct output handle, so the buffers would get out of sync between it and print.<br><br>macro, define, variable lookup was radically changed in this release. Instead of looking in the current stack frame, and then the global stack frame, and then giving up ... it now searches recursively through all stack frames, starting from the deepest (current) level, all the way up to the top level. It tries elevating through the entire scope (eg a.b.c.name, then a.b.name, then a.name, then name) before moving up to the next stack frame and repeating. This probably won't actually be all that useful in practice, but I'm sure you guys will come up with some Eldritch horror that relies on it ;)<br><br>I restored the functionality of the global keyword to how it worked in v14r05. It simply puts things in the global stack frame ... it doesn't remove scoping anymore.<br><br>I sincerely hope you guys like this WIP. I tried to address all your concerns with r06, and it took a hell of a lot of work &gt;_&gt;</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=40.html(225): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r08.tar.xz">https://files.byuu.org/temp/bass_v14r08.tar.xz</a><!-- m --><br><br>See above post for changes.<br><br>The last thing to solve is the scope escaping stuff. Once we're happy with that, it'll be time to push v15.<br><br><hr><br><br>Side note: my goal is strict backward compatibility with v15 in the future.<br><br>I'm okay with bass forks, but would the existing bass forks consider rebasing their own work off v15 in the future? Doesn't have to be right away.<br><br>I was thinking, if every bass variant has the same core language syntax, then it will become possible to produce bass code that works in every fork.<br><br>Obviously, it's expected that each fork will add additional features. And code that uses those features will lose compatibility with other bass forks. But so long as they don't modify the core language syntax, this should be acceptable.<br><br>I can't force peoples' hands here, so if it's a situation of fork maintainers not wanting to rewrite existing code to the new syntax, I'll understand that. I can't even 100% guarantee I won't end up breaking v15 code again in the future, but will try really hard not to. Still, it would be a shame to finally try to aim for stability but still have forks that limit this idea.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=50.html(83): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r09.tar.xz">https://files.byuu.org/temp/bass_v14r09.tar.xz</a><!-- m --><br><br>So close to v15. I'm really starting to look forward to getting v15 out too, these improvements are terrific.<br><br><hr><br><br>bass architectures are no longer subclassed objects of bass. They are now separate Architecture classes, which can call into the actual bass object by way of a bound reference to the bass object itself.<br><br>This means that the architecture keyword is now part of bass itself, and it starts off without the table assembler present at all.<br><br>Currently, the only built-in architecture is &quot;none&quot;, but I do intend to add m68k and arm7tdmi sometime before I die.<br><br>If no adequate built-in architecture is found, it'll now look for table files that match &quot;name.arch&quot;, and it will look in two places: first, inside architecutures/name.arch next to the bass executable file. Second, in ~/.local/share/bass/architectures or %localappdata/bass/architectures.<br><br>The snes.cpu =&gt; wdc65816 and snes.smp =&gt; spc700 architecture files are now external. They'll ship in a location that they'll work automatically out of the box on Windows, and Linux/BSD users can run make install to get them to the appropriate location. This change should make it easier for users to understand how to pull in more architectures made by others. And I can start linking to them as supplemental files on the bass download page.<br><br>Also, architecture files can now start with &quot;endian lsb&quot; or &quot;endian msb&quot;, which will modify bass to use the given endianness. The table assembler still isn't flexible with how it writes out its own data. That's gonna be a big pain to get it exactly right. But we'll get there. I'm not too worried about post-v15 breaking changes to table-driven .arch files. That won't break any users' code, it'll just require table updates.<br><br><hr><br><br>bass now has a special strip function that's run immediately on all input lines that transforms all double spaces to single spaces, leaving double spaces inside quoted strings alone. It's a custom in-place affair, so hopefully it shouldn't affect speed too much.<br><br>Thinking about it just now, there may be a slight issue:<br><br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">auto Bass::strip(string&amp; s) -&gt; void {<br>&nbsp; uint offset = 0;<br>&nbsp; bool quoted = false;<br>&nbsp; for(int n = 0; n &lt; s.size() - 1; n++) {&nbsp; //*** issue here ***<br>&nbsp; &nbsp; if(s&#91;n&#93; == '&quot;') quoted = !quoted;<br>&nbsp; &nbsp; if(!quoted &amp;&amp; s&#91;n&#93; == ' ' &amp;&amp; s&#91;n + 1&#93; == ' ') continue;<br>&nbsp; &nbsp; s.get()&#91;offset++&#93; = s&#91;n&#93;;<br>&nbsp; }<br>&nbsp; s.resize(offset);<br>}</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br>I think we may want to go ahead and say s.size() instead of s.size()-1. Yet somehow in my own testing, everything assembled and worked properly, so I'm not sure. I was trying to avoid accessing s[n+1] being &gt;= s.size(), but honestly that doesn't matter as strings always have a '\0' at the end of them anyway.<br><br>If you run into any errors, make the above change first. I'll fix this in r10.<br><br>Anyway, the point of this change is to allow things like <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">lda   #$10</pre>. I'm not going to support things like <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">lda $1234, x</pre> so you are just going to have to deal with that one, sorry. I also <strong>really</strong> don't want to bring back case-insensitivity. I do not like yelling in assembler. And I really don't like the idea that if someone else likes yelling, and someone wants to brin their work into their project, the case-insensitive flag will infect their own project. It essentially makes two forked versions of bass syntax, which is very bad.<br><br><hr><br><br>I added Undisbeliever's comment fix, so quoted strings can contain &quot;//&quot; now if you wanted.<br><br><hr><br><br>The special {#} counter for macros is now &quot;_#_&quot; instead of &quot;_#&quot;, so you can use it as a prefix or a suffix without error messages being weird.<br><br><hr><br><br>I also added a new validate() function that ensures the names of macros, inlines, namespaces, functions, labels, defines, variables, and constants match the official naming rules. So you'll get an error if you try and say <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">namespace foo: {</pre> or <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">function bar: {</pre> now.<br><br><hr><br><br>Errata:<br><br>The documentation says the files go to ~/.local/bass/architectures/, but it should be ~/.local/share/bass/architectures/ instead.<br><br>Bass::strip() may be flawed. See fix above.<br><br><hr><br><br>Once again, the only thing left might be a specialization to ignore scoping when declaring variables inside of namespaces, functions, or macros.<br><br>If possible, I'd like to see a good use case where this is desirable. There's no such scoping escape equivalent in any programming language I use, eg C/C++, so I'm really unsure why you'd want to do this instead of just putting it in the parent scope.<br><br>And I kind of feel that inline can handle those cases where you really do need it in the parent scope.<br><br>But ... now's the time to convince me.<br><br>I also want more feedback on whether inline should default to using the parent scope, or if it should only use the parent stack frame.<br><br><hr><br><br>I'm also not going to rush v15 this time. Instead, I'll post something like v15-beta1, and if we can go a few weeks without any complications, then I'll repost said beta as v15 official. I will post Windows binaries and have it on the bass download page, so people will be able to work with the beta for a while before the official release is posted.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=60.html(223): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r10.tar.xz">https://files.byuu.org/temp/bass_v14r10.tar.xz</a><!-- m --><br><br><pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">namespace name {</pre> now sets a constant with the address of <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">name</pre>. So if you really don't think function is an appropriate specifier for something, use namespace instead.<br><br>I've added a new keyword named <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">parent</pre>, which places objects into the next highest stack frame level. This is really only useful for recursive macros. If you are only one macro deep, then <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">global</pre> has the exact same effect. But for recursive macros, this allows some nice code simplification. You'll get an error if you try to use global/parent on things that don't take them, or if you try to use both at the same time.<br><br>I fixed a serious error where Bass::strip() was cutting off the last character of input strings in v14r09. Whoops.<br><br>I also fixed the documentation error, and added more stuff to it.<br><br><hr><br><br>So I still haven't seen any indication of why I should allow <em>scope</em> escaping (eg use the parent or global scope for a variable name.) I understand the utility for <em>frame</em> escaping.<br><br>In absense of any kind of compelling use case, I'm going to reject the feature for v15. But we could revive it for v16+, maybe.<br><br>Again, I know I was fuzzy on it in the past as well, but please understand that scoping refers to the name prefixes, whereas framing refers to the lifetime of objects inside of macros. They are entirely different things.<br><br>So at this point, I think I have everything I need, and will probably build v14r10 binaries as v15-beta1. I want to go something like 30 days without a breaking change before declaring a v15 official release.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=60.html(331): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r11.tar.xz">https://files.byuu.org/temp/bass_v14r11.tar.xz</a><!-- m --><br><br>New syntax changes:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">constant value(0) =&gt; constant value = 0<br>variable value(0) =&gt; variable value = 0<br>define value(x) =&gt; define value = x<br>evaluate value(x) =&gt; evaluate value = x</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br>Defines can now take optional arguments. They are evaluated via evaluateDefines() in the execute() phase.<br><br>Added a new base object type called <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">expression</pre>. It's part of the evaluate() functionality.<br><br>I corrected a bug where inline macro parameters were also going into the parent scope. That's never desirable.<br><br>Blank expressions can now evaluate to 0. This is to allow assignment of blank defines and for resetting variables.<br><br>I cleaned up macro evaluation/execution and removed the unnecessary struct Parameter.<br><br>Zero-parameter objects (macros, defines, expressions) no longer add &quot;:0&quot; for arity overload. This only happens for 1+ parameters now. This doesn't really have a functional effect.<br><br><hr><br><br>Errata:<br><br>The documentation has not been updated this time, because it's a lot of changes and I'm really tired. See the above post for usage examples for now.<br><br>The db and print functions use qsplit, but this doesn't work if you use multi-parameter expressions. It'll break on the commas inside of said functions. I'm going to have to write a custom split function to handle this case. Again, I was too tired to do this today.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=70.html(191): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r12.tar.xz">https://files.byuu.org/temp/bass_v14r12.tar.xz</a><!-- m --><br><br>Added a new Bass::split() function that is aware of both quotes and parenthesis level at the same time. Everything has been updated to use this new function.<br><br>print_char and print_hex are gone. I came up with a far better way to implement this: print can now take prefixes on variables to change their output type. Supported prefixes are <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">char:</pre>, <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">binary:</pre>, <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">hex:</pre>. Example: <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">print &quot;PC=$&quot;, hex:pc&#40;&#41;, &quot;\n&quot;</pre>. This really works <em>so</em> much better. You don't have to break out of a print statement just because you want to print an integer in a different format. The abbreviation is more terse, and doesn't eat away valid macro/expression names. Rather surprised I didn't come up with this before. This is exactly the kind of obvious improvement where I'd hate to be stuck with the old behavior for legacy compatibility, so I'm really happy I got this in before v15.<br><br>Arity overloading now uses &quot;#args&quot; instead of &quot;:args&quot;. Doesn't really matter, you should never try using arity overloads in bass code to access things. bass does this for you automatically.<br><br>Fixed compilation of --, -, +, ++ labels. Thanks to hex_usr for the bug report.<br><br>It isn't necessary as both split() and strip() are now aware of aspostrophes as quoting escapes, but I added <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">\c=,</pre> as an escape sequence all the same.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=70.html(297): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r13.tar.xz">https://files.byuu.org/temp/bass_v14r13.tar.xz</a><!-- m --><br><br>Command-line syntax changed:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">bass create -o test.rom test.asm =&gt; bass -o test.rom test.asm<br>bass modify -o test.rom test.asm =&gt; bass -m test.rom test.asm<br>(not possible) =&gt; bass test.asm</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br>namespaces no longer create a constant with their address, so that you can reopen them again later.<br><br>findExpression() missing return statement added to fix crashing bug [UnDisbeliever]<br><br>Bass::split() and Bass::strip() handle quotes vs apostrophes smarter, can now support eg <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">db &quot;Let&#39;s Go!&quot;</pre>.<br><br>Bass::split() prints errors on mismatched quotes or parentheses. Bass::strip() does not on mismatched quotes, because this is used at too low a level in the assembler for me to feel comfortable about doing that.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=80.html(225): <div class="postbody"><!-- m --><a class="postlink" href="https://files.byuu.org/temp/bass_v14r14.tar.xz">https://files.byuu.org/temp/bass_v14r14.tar.xz</a><!-- m --><br><br>Thanks for the fix. I moved the strip() command into the block processor instead of line processor, just to hopefully give better error messages, and to remove a now-redundant extra call to strip() that was there. But it should work the same.<br><br>Also added your missing instructions. I left them out because eg sta &lt;anything&gt;,y was always picking the correct size anyway, but ... whatever, easy enough to add in case someone wants to use .bwl all the time.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154&start=80.html(365): <div class="postbody">Active paths are a nightmare and weird stuff happens when you eg run bass from a different folder, eg <pre style="background: #1a1f29; border: 1px solid #2a334a; border-radius: 0.3em; color: #c0c0c0; display: inline; font-size: 0.9em; padding: 0.1em;">[$] projects/bass_v15/bass source.asm</pre> runs in $ instead of in bass_v15.<br><br>Active source code path maybe, but I thought it'd be bad if everyone just started shipping with their own arch files when they weren't needed. If it's a good arch, we should try to get it into the archive.<br><br>I wonder if someone'd be up for something like Screwtape is doing with higan and maintain a &quot;bass source + archs&quot; Git repository + download.<br><br>&gt; I'm aware that a total name change might come across as stealing the credit, hence why I'm asking.<br><br>I tend to prefer it. Especially when people use &lt;official project name&gt;-&lt;word that implies it is superior to official project&gt; naming. But either is fine.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1154.html(83): <div class="postbody">I'll use this thread for WIPs prior to v15's release.<br><br>Here's the latest WIP, v14r05: (source code only, sorry)<br><br><!-- m --><a class="postlink" href="http://files.byuu.org/temp/bass_v14r05.tar.xz">http://files.byuu.org/temp/bass_v14r05.tar.xz</a><!-- m --><br><br>Lots of changes to the underlying nall library since v14. If anyone has lots of source code written in bass v14, could you please try assembling a binary with both v14 and v14r05, and diff the outputs to make sure it's generating identical files?<br><br>I still don't have a lot of bass source code written myself, so regression testing's somewhat difficult for me.<br><br>Also, I may rename the next release to v015 instead of just v15. I don't expect to ever make it to v100, but you never know.<br><br><hr><br><br>Windows compilation fixes: (sorry for the added hassle)<br><br>nall/directory.hpp:104:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; string_vector list;</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br>nall/windows/registry.hpp:83:<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">&nbsp; &nbsp; string_vector part = name.split(&quot;/&quot;), result;</div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div></div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1413.html(83): <div class="postbody">I just found a bug in bass where a typo involving a colon at the end of a line can swallow instructions.<br><br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">arch snes.cpu<br>origin 0<br><br>Start:<br>&nbsp; &nbsp; lda.w&nbsp; End:<br>End:<br><br>if Start == End {<br>&nbsp; &nbsp; error &quot;Instruction Swallowed&quot;<br>}<br></div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br><br>The only way I can see to eliminate this bug is ensure that the label name contains no spaces in the setConstant function.<br><br>This diff adds a validator that will check the names of all scopes, macros, defines, variables and constants during the query phrase.<br><div class="bb-wrapper"><table border="0" cellspacing="0" cellpadding="0" class="bb-table" width="100%"><tr><td width="4" height="4" class="bb-left-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-top"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr><tr><td class="bb-left"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td><td class="bb-content bb-code" width="100%"><div class="codetitle"><b>Code:</b></div><div class="codecontent">diff -pur bass_v14r05-base/bass/core/assemble.cpp bass_v14r05-namefix/bass/core/assemble.cpp<br>--- bass_v14r05-base/bass/core/assemble.cpp&nbsp; &nbsp;2016-07-01 18:09:56.000000000 +1000<br>+++ bass_v14r05-namefix/bass/core/assemble.cpp&nbsp; &nbsp;2016-11-03 18:13:47.369865288 +1000<br>@@ -26,6 +26,7 @@ auto Bass::assemble(const string&amp; statem<br>&nbsp; &nbsp;if(s.match(&quot;scope ?* {&quot;) || s.match(&quot;scope {&quot;)) {<br>&nbsp; &nbsp; &nbsp;s.trim(&quot;scope &quot;, &quot;{&quot;, 1L).strip();<br>&nbsp; &nbsp; &nbsp;if(s.endsWith(&quot;:&quot;)) setConstant(s.trimRight(&quot;:&quot;, 1L), pc());<br>+&nbsp; &nbsp; if(s) validateName(s);<br>&nbsp; &nbsp; &nbsp;scope.append(s);<br>&nbsp; &nbsp; &nbsp;return true;<br>&nbsp; &nbsp;}<br>diff -pur bass_v14r05-base/bass/core/core.hpp bass_v14r05-namefix/bass/core/core.hpp<br>--- bass_v14r05-base/bass/core/core.hpp&nbsp; &nbsp;2016-07-01 18:03:46.000000000 +1000<br>+++ bass_v14r05-namefix/bass/core/core.hpp&nbsp; &nbsp;2016-11-03 16:50:24.472357237 +1000<br>@@ -131,6 +131,7 @@ protected:<br>&nbsp; &nbsp;auto filepath() -&gt; string;<br>&nbsp; &nbsp;auto text(string s) -&gt; string;<br>&nbsp; &nbsp;auto character(string s) -&gt; int64_t;<br>+&nbsp; auto validateName(const string&amp; name) -&gt; void;<br>&nbsp;<br>&nbsp; &nbsp;//internal state<br>&nbsp; &nbsp;Instruction* activeInstruction = nullptr;&nbsp; //used by notice, warning, error<br>diff -pur bass_v14r05-base/bass/core/utility.cpp bass_v14r05-namefix/bass/core/utility.cpp<br>--- bass_v14r05-base/bass/core/utility.cpp&nbsp; &nbsp;2016-07-01 18:07:31.000000000 +1000<br>+++ bass_v14r05-namefix/bass/core/utility.cpp&nbsp; &nbsp;2016-11-03 19:21:28.390991910 +1000<br>@@ -2,9 +2,14 @@ auto Bass::setMacro(const string&amp; name,<br>&nbsp; &nbsp;if(stackFrame.size() == 0) return;<br>&nbsp; &nbsp;auto&amp; macros = stackFrame&#91;local ? stackFrame.size() - 1 : 0&#93;.macros;<br>&nbsp;<br>+&nbsp; validateName(name);<br>&nbsp; &nbsp;string scopedName = {name, &quot;:&quot;, parameters.size()};<br>&nbsp; &nbsp;if(scope.size()) scopedName = {scope.merge(&quot;.&quot;), &quot;.&quot;, scopedName};<br>&nbsp;<br>+&nbsp; for(auto&amp; pName : parameters) {<br>+&nbsp; &nbsp; validateName(pName.split(&quot; &quot;, 1L).strip().right());<br>+&nbsp; }<br>+<br>&nbsp; &nbsp;if(auto macro = macros.find({scopedName})) {<br>&nbsp; &nbsp; &nbsp;macro().parameters = parameters;<br>&nbsp; &nbsp; &nbsp;macro().ip = ip;<br>@@ -41,6 +46,7 @@ auto Bass::setDefine(const string&amp; name,<br>&nbsp; &nbsp;if(stackFrame.size() == 0) return;<br>&nbsp; &nbsp;auto&amp; defines = stackFrame&#91;local ? stackFrame.size() - 1 : 0&#93;.defines;<br>&nbsp;<br>+&nbsp; validateName(name);<br>&nbsp; &nbsp;string scopedName = name;<br>&nbsp; &nbsp;if(scope.size()) scopedName = {scope.merge(&quot;.&quot;), &quot;.&quot;, name};<br>&nbsp;<br>@@ -78,6 +84,7 @@ auto Bass::setVariable(const string&amp; nam<br>&nbsp; &nbsp;if(stackFrame.size() == 0) return;<br>&nbsp; &nbsp;auto&amp; variables = stackFrame&#91;local ? stackFrame.size() - 1 : 0&#93;.variables;<br>&nbsp;<br>+&nbsp; validateName(name);<br>&nbsp; &nbsp;string scopedName = name;<br>&nbsp; &nbsp;if(scope.size()) scopedName = {scope.merge(&quot;.&quot;), &quot;.&quot;, name};<br>&nbsp;<br>@@ -112,6 +119,7 @@ auto Bass::findVariable(const string&amp; na<br>&nbsp;}<br>&nbsp;<br>&nbsp;auto Bass::setConstant(const string&amp; name, int64_t value) -&gt; void {<br>+&nbsp; validateName(name);<br>&nbsp; &nbsp;string scopedName = name;<br>&nbsp; &nbsp;if(scope.size()) scopedName = {scope.merge(&quot;.&quot;), &quot;.&quot;, name};<br>&nbsp;<br>@@ -187,3 +195,19 @@ unknown:<br>&nbsp; &nbsp;warning(&quot;unrecognized character constant: &quot;, s);<br>&nbsp; &nbsp;return 0;<br>&nbsp;}<br>+<br>+auto Bass::validateName(const string&amp; name) -&gt; void {<br>+&nbsp; if(!queryPhase()) return;<br>+<br>+&nbsp; const char* p = name.data();<br>+&nbsp; if(!((p&#91;0&#93; &gt;= 'A' &amp;&amp; p&#91;0&#93; &lt;= 'Z') || (p&#91;0&#93; &gt;= 'a' &amp;&amp; p&#91;0&#93; &lt;= 'z') || p&#91;0&#93; == '_' || p&#91;0&#93; == '#')) {<br>+&nbsp; &nbsp; warning(&quot;Invalid name: &quot;, name);<br>+&nbsp; &nbsp; return;<br>+&nbsp; }<br>+&nbsp; while(*++p) {<br>+&nbsp; &nbsp; if(!((p&#91;0&#93; &gt;= 'A' &amp;&amp; p&#91;0&#93; &lt;= 'Z') || (p&#91;0&#93; &gt;= 'a' &amp;&amp; p&#91;0&#93; &lt;= 'z') || (p&#91;0&#93; &gt;= '0' &amp;&amp; p&#91;0&#93; &lt;= '9') || p&#91;0&#93; == '_' || p&#91;0&#93; == '.' || p&#91;0&#93; == '#')) {<br>+&nbsp; &nbsp; &nbsp; warning(&quot;Invalid name: &quot;, name);<br>+&nbsp; &nbsp; &nbsp; return;<br>+&nbsp; &nbsp; }<br>+&nbsp; }<br>+}<br></div></td><td class="bb-right"><img src="images/spacer.gif" width="3" height="4" border="0" alt=""></td></tr><tr><td width="4" height="4" class="bb-left-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="100%" class="bb-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td><td width="4" height="4" class="bb-right-bot"><img src="images/spacer.gif" width="4" height="4" border="0" alt=""></td></tr></table></div><br><br><hr><br><strong>EDIT:</strong> Added validateName check to macro parameter names</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1485.html(83): <div class="postbody">Looks like bass never got uploaded to the main site after the whole server shuffle.  I have the original v14 package here: <!-- m --><a class="postlink" href="https://dl.qwertymodo.com/bass_v14.tar.xz">https://dl.qwertymodo.com/bass_v14.tar.xz</a><!-- m --><br><br>Actually, it looks like most of the Tools links are dead, but I don't have any of the others.  If anybody else happens to have them, I can mirror them.</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=1485.html(153): <div class="postbody">Ok, here's a mirror:<br><br><strong><em>Higan v101</em></strong><br><a href="https://dl.qwertymodo.com/higan_v101-windows.7z" class="postlink">higan v101 (Windows binary)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">7658E384E1414762FD87218FCBECD8890A613A2AAD8DF11CE9E2921A5D4B4C6E</span><br><a href="https://dl.qwertymodo.com/higan_v101-source.7z" class="postlink">higan v101 (source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">C82F2128EB8C6F4728E4C1E2579666F723B02B0666A786F0C19C8D05AE1B7913</span><br><br><strong><em>Tools</em></strong><br><a href="https://dl.qwertymodo.com/bass_v14.tar.xz" class="postlink">bass v14 (Windows binary and source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">CFAD6EF2E2BFB0E5D7EE7657C23DDD5FD77D0677907F1C67624034E023CC3305</span><br><a href="https://dl.qwertymodo.com/beat_v03.tar.xz" class="postlink">beat v03 (Windows binary and source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">0F4A33CBBE54AF28077433CA9F855E5D80AE942D5D976A0D654A8E1A528A1A1A</span><br><a href="https://dl.qwertymodo.com/kaijuu_v05.7z" class="postlink">kaijuu v05 (Windows binary)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">8777F15D5122737B6BEACF0EE99D4BB087938B34A523A44C94A3090156ADA096</span><br><a href="https://dl.qwertymodo.com/kaijuu_v05.tar.xz" class="postlink">kaijuu v05 (source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">013D9DE71E9668D2C3034927FD2F575E1D9213D6C3A2EF668DAC984E6E4BC7C8</span><br><a href="https://dl.qwertymodo.com/" class="postlink">mosaic v07 (Windows binary and source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">FA20CDD376D91EC57D2176844EC5D6583663DB6FA331A2A9DD5D17CB785A30C3</span><br><a href="https://dl.qwertymodo.com/trance_v01.tar.xz" class="postlink">trance v01 (source code)</a> <strong>SHA256:</strong> <span style="font-size: 85%; line-height: normal">C4CBA1EC4E558CCF20BFD82498B07C84B409F61DC2DE55291E4946CFC3E4C65C</span><br><br><strong><em>Libraries</em></strong><br><a href="https://dl.qwertymodo.com/libco_v17.tar.xz" class="postlink">libco v17 (source code)</a> <span style="font-size: 85%; line-height: normal">SHA256: <strong>SHA256:</strong> [size=85]B5FB50C7D6609375FC7267C4CC83A82FF6867874A4142D72802AB5AE7C161EFE</span><br>nall(??)<br>ruby(??)<br>hiro(??)</div>
C:\wamp\www\byuubackup2\viewtopic.php@f=20&t=710.html(83): <div class="postbody">This is the current WIP:<br><!-- m --><a class="postlink" href="http://files.byuu.org/temp/bass_v14r02.tar.xz">http://files.byuu.org/temp/bass_v14r02.tar.xz</a><!-- m -->  (source only)<br><!-- m --><a class="postlink" href="https://www.dropbox.com/s/mn7rqwm34jyk53y/bass_v14r02.7z?dl=0">https://www.dropbox.com/s/mn7rqwm34jyk5 ... 02.7z?dl=0</a><!-- m -->  (Windows 32-bit binary)<br><br>This is the last stable release:<br><!-- m --><a class="postlink" href="http://files.byuu.org/download/bass_v14.tar.xz">http://files.byuu.org/download/bass_v14.tar.xz</a><!-- m -->  (source + Windows binary)<br><br>I've updated bass to compile using the newest version of nall, but it's quite a lot of changes so I'm worried that something may compile that has changed semantics under the hood.<br><br>If possible, I'd appreciate if anyone using bass could try assembling their projects with this new WIP, and then do a binary diff comparison between what bass v14 and v14.02 produces, and let me know if they spot any differences.</div>
WARNING: Line 291 too long (> 64k characters) in C:\wamp\www\byuubackup2\viewtopic.php@f=4&t=2061&start=220.html
C:\wamp\www\byuubackup2\viewtopic.php@f=7&t=274.html(151): <div class="postbody">Thank you alot :D<br><br>I chose bass_v13.tar.xz<br><!-- m --><a class="postlink" href="http://snesemu.black-ship.net/tools/bass/">http://snesemu.black-ship.net/tools/bass/</a><!-- m --></div>
C:\wamp\www\byuubackup2\viewtopic.php@f=7&t=274.html(287): <div class="postbody">Try this link for latest bass:<br><!-- m --><a class="postlink" href="https://web.archive.org/web/20140710190910/http://byuu.org/files/bass_v14.tar.xz">https://web.archive.org/web/20140710190 ... v14.tar.xz</a><!-- m --></div>
Found 18 occurrence(s) in 13 file(s), 52776 ms

